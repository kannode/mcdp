# -*- coding: utf-8 -*-
from compmake.utils.filesystem_utils import make_sure_dir_exists
from compmake.utils.friendly_path_imp import friendly_path
from mcdp import logger
from mcdp_utils_misc.fileutils import create_tmpdir, write_data_to_file
import os
import sys

from contracts.utils import indent
from system_cmd.meat import system_cmd_result

import PyPDF2


class NoFigureName(Exception):
    pass


def get_figure_name(page):
    text = page.extractText().encode('utf8')
    lines = text.split('\n')
    for l in lines:
        prefix = 'figure ='
        if prefix in l:
            i = l.index(prefix) + len(prefix)
            l = l[i:]
            name = l.strip()
            return name
    msg = 'Could not find figure name.'
    msg += '\n\n' + indent(text, '|', 'text: |')
    raise NoFigureName(msg)
            
def go():
    fn = sys.argv[1]
    outdir = sys.argv[2]
    
    warning = os.path.join(outdir, 'DO_NOT_PLACE_OTHER_FILES_HERE.txt')
    write_data_to_file('It is autogenerated', warning)
    
    f = open(fn, 'rb')
    
    pdfReader = PyPDF2.PdfFileReader(f)
    n = pdfReader.numPages
    
    results = []
    for i in range(n):
        pageObj = pdfReader.getPage(i)
        try: 
            name = get_figure_name(pageObj)
            results.append((i, name))
            logger.info('page %d name = %r' % (i, name))
        except NoFigureName as _e:
            logger.error(str(_e))

    allt = ""
    tmpdir = create_tmpdir('clipart')    
    for i, name in results:
        target_pdf = os.path.join(outdir, name + '.pdf')
        target_svg = os.path.join(outdir, name + '.svg')
        page = i+1
        process_one(fn, page, target_pdf, target_svg, tmpdir, name)
        
        t = """
<div figure-id="fig:NAME">
    <figcaption>Add caption here</figcaption>
    <img src="NAME.svg" style="width: 80%; height: auto"/>
</div>     
"""
        t = t.replace('NAME', name)
        allt += t
    
    instructions = os.path.join(outdir, 'how_to_use.md.example')
    write_data_to_file(allt, instructions)
    print allt
        
def process_one(filename, page, target_pdf, target_svg, tmpdir, name):
    extracted = os.path.join(tmpdir, name + '_extracted.pdf')
    cropped = os.path.join(tmpdir, name + '_extracted_no_label.pdf')
    extract_page(filename, page, extracted)
    pdfcrop_margins(extracted, cropped, "0mm 0mm 0mm 5cm")
    pdfcrop(cropped, target_pdf)
    pdf2svg(target_pdf, target_svg)
    logger.info('Wrote %s' % friendly_path(target_pdf))
    logger.info('Wrote %s' % friendly_path(target_svg))
        
        
def pdf2svg(f1, f2):
    make_sure_dir_exists(f2)
    cwd = '.'
    cmd = ['pdf2svg', f1, f2]
    _res = system_cmd_result(cwd, cmd,
                      display_stdout=False,
                      display_stderr=False,
                      raise_on_error=True)

def pdfcrop_margins(f1, f2, margins):
    make_sure_dir_exists(f2)
    cwd = '.'
    cmd = ['pdfjam',  '--keepinfo', '--trim', margins, 
           '--paper', 'letter', '--landscape',
           '--clip',  'true', '--outfile', f2, f1]
#     cmd = ['pdfcrop', f1, '--margins', str(margins), f2]
    _res = system_cmd_result(cwd, cmd,
                      display_stdout=False,
                      display_stderr=False,
                      raise_on_error=True)
    
def pdfcrop(f1, f2):
    make_sure_dir_exists(f2)
    cwd = '.'
    cmd = ['pdfcrop', f1, f2]
    _res = system_cmd_result(cwd, cmd,
                      display_stdout=False,
                      display_stderr=False,
                      raise_on_error=True)
    
def extract_page(filename, page, output):
    make_sure_dir_exists(output)
    cwd = '.'
    cmd = ['pdftk', filename, 'cat', str(page), 'output', output]
    _res = system_cmd_result(cwd, cmd,
                      display_stdout=False,
                      display_stderr=False,
                      raise_on_error=True)
    

if __name__ == '__main__':
    go()
