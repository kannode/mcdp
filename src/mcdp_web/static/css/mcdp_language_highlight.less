@import 'colors';

span.Unit, span.Nat, span.Int, span.Rcomp {
  color: @unit-color;
}

span.ValueExpr, span.IntegerFraction, span.NatConstant, span.RcompConstant {
  color: @misc-color;
}

span.RcompUnit {
  color: @misc-color;
}

span.MCDPKeyword,
span.SubKeyword,
span.CompactKeyword,
span.AbstractKeyword,
span.TemplateKeyword,
span.ForKeyword,
span.UsingKeyword,
span.ImplementsKeyword,
span.LoadKeyword,
span.CodeKeyword,
span.FromLibraryKeyword,
span.leq, span.geq, span.OpKeyword, span.eq, span.plus, span.times, span.DPWrapToken,
span.ImplementedbyKeyword, span.FromCatalogueKeyword, span.MCDPTypeKeywor,
span.InstanceKeyword,
span.CoproductWithNamesChooseKeyword,
span.MCDPTypeKeyword,
span.FromLibraryKeyword,
span.CoproductWithNamesChooseKeyword,
span.MCDPKeyword,
span.SubKeyword,
span.CompactKeyword,
span.AbstractKeyword,
span.TemplateKeyword,
span.ForKeyword,
span.UsingKeyword,
span.LoadKeyword, span.CodeKeyword,
span.leq, span.geq, span.OpKeyword, span.eq, span.plus, span.times, span.exponent, span.product,
span.sum,
span.OpenBraceKeyword,
span.CloseBraceKeyword,
span.comma,
span.DPWrapToken,
span.ImplementedbyKeyword,
span.FromCatalogueKeyword,
span.MCDPTypeKeyword,
span.InstanceKeyword,
span.FlattenKeyword,
span.ApproxKeyword,
span.TakeKeyword,
span.SpecializeKeyword,
span.FinitePosetKeyword,
span.ProductKeyword,
span.UncertainKeyword,
span.UpperSetsKeyword,
span.LowerSetsKeyword,
span.EmptySetKeyword,
span.PowerSetKeyword,
span.IntervalKeyword,
span.UpperSetFromCollectionKeyword,
span.LowerSetFromCollectionKeyword,
span.TopKeyword,
span.BottomKeyword,
span.SingleElementPosetKeyword,
span.SpaceCoproductKeyword,
span.IgnoreKeyword,
span.SolveModelKeyword,
span.AnyOfKeyword,
span.MaximalsKeyword,
span.MinimalsKeyword,
span.IgnoreResourcesKeyword,
span.ProcName,
span.ApproxUpperKeyword,
span.ApproxLowerKeyword,
span.VarStatementKeyword,
span.GenericOperationName,
span.EversionKeyword,
span.AddBottomKeyword,
span.LBRACE,
span.RBRACE,
span.LBRACKET,
span.RBRACKET,
span.plus_or_minus,
span.percent,
span.LEFTRIGHTARROW,
span.AssertEqualKeyword,
span.AssertLEQKeyword,
span.AssertGEQKeyword,
span.AssertLTKeyword,
span.AssertGTKeyword,
span.AssertNonemptyKeyword,
span.AssertEmptyKeyword,
span.ConstantKeyword,
span.BetweenKeyword,
span.BetweenAndKeyword {
  font-weight: bold;
  color: @keyword-color;

}

span.MAPSTO {
  font-weight: bold;
  color: @rcolor;
}

span.MAPSFROM {
  font-weight: bold;
  color: @fcolor;
}

span.VName {
  color: blue;
}

/* constant */
span.CName {
  color: #333;
}

span.SetNameRValue > span.RName {
  color: @rcolor;
}

span.SetNameFValue > span.FName {
  color: @fcolor;
}

span.SumResources > span.RName {
  color: @rcolor;
}

span.SumFunctions > span.FName {
  color: @fcolor;
}

span.DerivFunctionName {
  color: @fcolor;
}

span.DerivResourceName {
  color: @rcolor;
}

span.ProvideKeyword, span.RequireKeyword {
  font-weight: bold;

}

span.ProductWithLabelsLabel, span.IndexLabel {
  color: #cc6600;
}

/* f provided by s */
span.ProvidedByKeyword,
span.Function > span.FName {
  color: @fcolor;
}

/* f required by s */
span.RequiredByKeyword,
span.Resource > span.RName {
  color: @rcolor;
}

/* required rname - this is a function inside */
span.RequiredKeyword,
span.NewResource > span.RName {
  color: @fcolor;
}

/* provided fname - this is a resource inside */
span.ProvidedKeyword,
span.NewFunction > span.FName {
  color: @rcolor;
}

/* provides f [m] */

span.ProvideKeyword {
  color: @fcolor;
}

span.FunStatement > span.FName,
span.FunShortcut1 > span.FName,
span.FunShortcut1m > span.FName,
span.FunShortcut2 > span.FName,
span.FunShortcut3 > span.FName,
span.FunShortcut4 > span.FName,
span.FunShortcut5 > span.FName {
  color: @fcolor;
}

/* requires r [m] */
/* requires r >= ... */
/* requires r1, r2*/

span.RequireKeyword {
  color: @rcolor;
}

span.ResStatement > span.RName,
span.ResShortcut1 > span.RName,
span.ResShortcut1m > span.RName,
span.ResShortcut2 > span.RName,
span.ResShortcut3 > span.RName,
span.ResShortcut4 > span.RName,
span.ResShortcut5 > span.RName {
  color: @rcolor;
}

span.SetNameRValue > span.SetNameGenericVar {
  color: @rcolor;
}

span.SetNameFValue > span.SetNameGenericVar {
  color: @fcolor;
}

/* There is a bug that prevents this from working correctly. */
/* span.ImpName { color: #cc6600; } */
span.FuncName {
  color: #cc6600;
}

span.DPName, span.NDPName, span.PosetName, span.TemplateName,
span.TemplateParamName,
span.FinitePosetElement,
span.SingleElementPosetTag {
  color: #a0a;
}

span.DPTypeName, span.DPVariableRef {
  color: #00f;
  font-weight: bold;
}

span.comment {
  color: grey;
}

span.line-gutter {
  margin-right: 1em;
  color: grey;
}

span.PlaceholderLabel {
  color: grey;
  /*font-style: italic;*/
}

span.CommentModel {
  color: purple;
  font-weight: bold;
}

span.CommentFun {
  color: @fcolor;
  font-weight: bold;
}

span.CommentRes {
  color: @rcolor;
  font-weight: bold;
}

/* Special case: â‰¤ does not look good in regular font Courier */
span.leq, span.geq, span.OpenBraceKeyword, span.CloseBraceKeyword {
  /*font-family: Courier, monospace;*/
  font-weight: bold;
}

span.leq, span.geq {
  font-family: "FreeSerif";
  // font-size: 75%;
  font-weight: normal !important;
}

span.sum {
  font-family: "FreeSerif";
  font-weight: bold;
}

span.semantic_error {
  background-color: pink;

}

span.language_warning {
  background-color: yellow !important;
}

span.suggestion {
  background-color: white;
}

span.has_tooltip {
  /*border: solid 1px red;*/
}

div.tooltip {
  position: absolute;
  visibility: hidden;
}

span.has_tooltip:hover div.tooltip {
  visibility: visible;
  background-color: yellow !important;
  padding: 5px;
}

span.indentation {
  border-left: solid 10px white !important;
  margin-left: -10px !important;
}

@media screen {
  /* unsupported by prince */
  pre, code {
    tab-size: 4;
  }
}

code.keyword {
  color: #00a;
  font-weight: bold;
}

/* allow for manual */
code.FName {
  color: @fcolor;
}

code.RName {
  color: @rcolor;
}

span.ImpName {
  color: @icolor;
}

code.fvalue {
  span.ValueExpr, span.RcompUnit {
    color: @fcolor;
  }
}

code.rvalue {
  span.ValueExpr, span.RcompUnit {
    color: @rcolor;
  }
}

/* for catalogue */
.CatalogueFun span.ValueExpr,
.CatalogueFun span.RcompUnit {
  color: @fcolor !important;
}

.CatalogueRes span.ValueExpr,
.CatalogueRes span.RcompUnit {
  color: @rcolor !important;
}

//
// span[class*='Shortcut'] + span[class*='Shortcut'] :first-child{
//     border: solid;
//     display: inline-block;
//     margin-top: 7pt;
// }

span.CommentFun, .CommentRes {
  // // border: solid;
  // display: inline-block;
  // margin-bottom: 3pt;
}
