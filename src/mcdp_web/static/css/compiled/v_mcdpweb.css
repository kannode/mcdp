/*



    -----------------


    -----------------






        Automatically created ---  do not modify 


    -----------------


    -----------------


    -----------------


    -----------------



*//* http://meyerweb.com/eric/tools/css/reset/
   v2.0 | 20110126
   License: none (public domain)
*/
html,
body,
div,
span,
applet,
object,
iframe,
h1,
h2,
h3,
h4,
h5,
h6,
p,
blockquote,
pre,
a,
abbr,
acronym,
address,
big,
cite,
code,
del,
dfn,
em,
img,
ins,
kbd,
q,
s,
samp,
small,
strike,
strong,
sub,
sup,
tt,
var,
b,
u,
i,
dl,
dt,
dd,
ol,
ul,
li,
fieldset,
form,
label,
legend,
table,
caption,
tbody,
tfoot,
thead,
tr,
th,
td,
article,
aside,
canvas,
details,
embed,
figure,
figcaption,
footer,
header,
hgroup,
menu,
nav,
output,
ruby,
section,
summary,
time,
mark,
audio,
video {
  margin: 0;
  padding: 0;
  border: 0;
  vertical-align: baseline;
}
/* HTML5 display-role reset for older browsers */
article,
aside,
details,
figcaption,
figure,
footer,
header,
hgroup,
menu,
nav,
section {
  display: block;
}
blockquote,
q {
  quotes: none;
}
blockquote::before,
blockquote::after,
q::before,
q::after {
  content: '';
  content: none;
}
table {
  border-collapse: collapse;
  border-spacing: 0;
}
h1.draft,
h2.draft,
h3.draft {
  color: red !important;
}
span.placeholder {
  padding-left: 1px;
  padding-right: 1px;
  color: blue;
  background-color: #efe;
  border-radius: 4px;
  padding-left: 3px;
  padding-right: 3px;
  font-family: serif;
  font-style: italic;
}
span.Unit,
span.Nat,
span.Int,
span.Rcomp {
  color: #ac5600;
}
span.ValueExpr,
span.IntegerFraction,
span.NatConstant,
span.RcompConstant {
  color: #cc6600;
}
span.RcompUnit {
  color: #cc6600;
}
span.MCDPKeyword,
span.SubKeyword,
span.CompactKeyword,
span.AbstractKeyword,
span.TemplateKeyword,
span.ForKeyword,
span.UsingKeyword,
span.ImplementsKeyword,
span.LoadKeyword,
span.CodeKeyword,
span.FromLibraryKeyword,
span.leq,
span.geq,
span.OpKeyword,
span.eq,
span.plus,
span.times,
span.DPWrapToken,
span.ImplementedbyKeyword,
span.FromCatalogueKeyword,
span.MCDPTypeKeywor,
span.InstanceKeyword,
span.CoproductWithNamesChooseKeyword,
span.MCDPTypeKeyword,
span.FromLibraryKeyword,
span.CoproductWithNamesChooseKeyword,
span.MCDPKeyword,
span.SubKeyword,
span.CompactKeyword,
span.AbstractKeyword,
span.TemplateKeyword,
span.ForKeyword,
span.UsingKeyword,
span.LoadKeyword,
span.CodeKeyword,
span.leq,
span.geq,
span.OpKeyword,
span.eq,
span.plus,
span.times,
span.exponent,
span.product,
span.sum,
span.OpenBraceKeyword,
span.CloseBraceKeyword,
span.comma,
span.DPWrapToken,
span.ImplementedbyKeyword,
span.FromCatalogueKeyword,
span.MCDPTypeKeyword,
span.InstanceKeyword,
span.FlattenKeyword,
span.ApproxKeyword,
span.TakeKeyword,
span.SpecializeKeyword,
span.FinitePosetKeyword,
span.ProductKeyword,
span.UncertainKeyword,
span.UpperSetsKeyword,
span.LowerSetsKeyword,
span.EmptySetKeyword,
span.PowerSetKeyword,
span.IntervalKeyword,
span.UpperSetFromCollectionKeyword,
span.LowerSetFromCollectionKeyword,
span.TopKeyword,
span.BottomKeyword,
span.SingleElementPosetKeyword,
span.SpaceCoproductKeyword,
span.IgnoreKeyword,
span.SolveModelKeyword,
span.AnyOfKeyword,
span.MaximalsKeyword,
span.MinimalsKeyword,
span.IgnoreResourcesKeyword,
span.ProcName,
span.ApproxUpperKeyword,
span.ApproxLowerKeyword,
span.VarStatementKeyword,
span.GenericOperationName,
span.EversionKeyword,
span.AddBottomKeyword,
span.LBRACE,
span.RBRACE,
span.LBRACKET,
span.RBRACKET,
span.plus_or_minus,
span.percent,
span.LEFTRIGHTARROW,
span.AssertEqualKeyword,
span.AssertLEQKeyword,
span.AssertGEQKeyword,
span.AssertLTKeyword,
span.AssertGTKeyword,
span.AssertNonemptyKeyword,
span.AssertEmptyKeyword,
span.ConstantKeyword,
span.BetweenKeyword,
span.BetweenAndKeyword {
  font-weight: bold;
  color: #00a;
}
span.MAPSTO {
  font-weight: bold;
  color: darkred;
}
span.MAPSFROM {
  font-weight: bold;
  color: darkgreen;
}
span.VName {
  color: blue;
}
/* constant */
span.CName {
  color: #333;
}
span.SetNameRValue > span.RName {
  color: darkred;
}
span.SetNameFValue > span.FName {
  color: darkgreen;
}
span.SumResources > span.RName {
  color: darkred;
}
span.SumFunctions > span.FName {
  color: darkgreen;
}
span.DerivFunctionName {
  color: darkgreen;
}
span.DerivResourceName {
  color: darkred;
}
span.ProvideKeyword,
span.RequireKeyword {
  font-weight: bold;
}
span.ProductWithLabelsLabel,
span.IndexLabel {
  color: #cc6600;
}
/* f provided by s */
span.ProvidedByKeyword,
span.Function > span.FName {
  color: darkgreen;
}
/* f required by s */
span.RequiredByKeyword,
span.Resource > span.RName {
  color: darkred;
}
/* required rname - this is a function inside */
span.RequiredKeyword,
span.NewResource > span.RName {
  color: darkgreen;
}
/* provided fname - this is a resource inside */
span.ProvidedKeyword,
span.NewFunction > span.FName {
  color: darkred;
}
/* provides f [m] */
span.ProvideKeyword {
  color: darkgreen;
}
span.FunStatement > span.FName,
span.FunShortcut1 > span.FName,
span.FunShortcut1m > span.FName,
span.FunShortcut2 > span.FName,
span.FunShortcut3 > span.FName,
span.FunShortcut4 > span.FName,
span.FunShortcut5 > span.FName {
  color: darkgreen;
}
/* requires r [m] */
/* requires r >= ... */
/* requires r1, r2*/
span.RequireKeyword {
  color: darkred;
}
span.ResStatement > span.RName,
span.ResShortcut1 > span.RName,
span.ResShortcut1m > span.RName,
span.ResShortcut2 > span.RName,
span.ResShortcut3 > span.RName,
span.ResShortcut4 > span.RName,
span.ResShortcut5 > span.RName {
  color: darkred;
}
span.SetNameRValue > span.SetNameGenericVar {
  color: darkred;
}
span.SetNameFValue > span.SetNameGenericVar {
  color: darkgreen;
}
/* There is a bug that prevents this from working correctly. */
/* span.ImpName { color: #cc6600; } */
span.FuncName {
  color: #cc6600;
}
span.DPName,
span.NDPName,
span.PosetName,
span.TemplateName,
span.TemplateParamName,
span.FinitePosetElement,
span.SingleElementPosetTag {
  color: #a0a;
}
span.DPTypeName,
span.DPVariableRef {
  color: #00f;
  font-weight: bold;
}
span.comment {
  color: grey;
}
span.line-gutter {
  margin-right: 1em;
  color: grey;
}
span.PlaceholderLabel {
  color: grey;
  /*font-style: italic;*/
}
span.CommentModel {
  color: purple;
  font-weight: bold;
}
span.CommentFun {
  color: darkgreen;
  font-weight: bold;
}
span.CommentRes {
  color: darkred;
  font-weight: bold;
}
/* Special case: â‰¤ does not look good in regular font Courier */
span.leq,
span.geq,
span.OpenBraceKeyword,
span.CloseBraceKeyword {
  /*font-family: Courier, monospace;*/
  font-weight: bold;
}
span.leq,
span.geq {
  font-family: "FreeSerif";
  font-weight: normal !important;
}
span.sum {
  font-family: "FreeSerif";
  font-weight: bold;
}
span.semantic_error {
  background-color: pink;
}
span.language_warning {
  background-color: yellow !important;
}
span.suggestion {
  background-color: white;
}
span.has_tooltip {
  /*border: solid 1px red;*/
}
div.tooltip {
  position: absolute;
  visibility: hidden;
}
span.has_tooltip:hover div.tooltip {
  visibility: visible;
  background-color: yellow !important;
  padding: 5px;
}
span.indentation {
  border-left: solid 10px white !important;
  margin-left: -10px !important;
}
@media screen {
  /* unsupported by prince */
  pre,
  code {
    tab-size: 4;
  }
}
code.keyword {
  color: #00a;
  font-weight: bold;
}
/* allow for manual */
code.FName {
  color: darkgreen;
}
code.RName {
  color: darkred;
}
span.ImpName {
  color: darkorange;
}
code.fvalue span.ValueExpr,
code.fvalue span.RcompUnit {
  color: darkgreen;
}
code.rvalue span.ValueExpr,
code.rvalue span.RcompUnit {
  color: darkred;
}
/* for catalogue */
.CatalogueFun span.ValueExpr,
.CatalogueFun span.RcompUnit {
  color: darkgreen !important;
}
.CatalogueRes span.ValueExpr,
.CatalogueRes span.RcompUnit {
  color: darkred !important;
}
body {
  background-color: white;
  font-family: "Input Serif";
  font-family: "PT Sans";
  font-family: "Trebuchet MS", Tahoma, Verdana, Arial, sans-serif;
}
.unicode-icons {
  margin-bottom: -5px;
  margin-top: -5px;
  margin-right: 0.5em;
}
a {
  text-decoration: none;
}
pre code {
  font-family: "Anka/Coder Narrow", "Lucida Console", monospace;
}
.tip {
  display: none;
}
.tip {
  border-radius: 5px;
  padding: 5px;
  background: #73ad21;
  color: white;
  max-width: 20em;
}
ul {
  padding-left: 2em;
}
/*



    -----------------


    -----------------






        Automatically created ---  do not modify 


    -----------------


    -----------------


    -----------------


    -----------------



*/